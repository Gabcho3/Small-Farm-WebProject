// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmallFarm.Data;

#nullable disable

namespace SmallFarm.Data.Migrations
{
    [DbContext(typeof(SmallFarmDbContext))]
    [Migration("20240327203007_SeededManufacturer")]
    partial class SeededManufacturer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0d921142-95b0-4fdc-920b-ed1c6558adf2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47f8f12b-1ebe-4aaf-9c82-c5835456570f",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG7oK8XFme1gIbjGRHhhhg7y+7ugThnxSm7gLllQIpN5ocuN1TTQblZtqRDfS9LACA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86a4ab15-b6f2-4ebb-97f8-697fd43acb26",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "7172a5b3-34c7-4af5-9c2b-6da17a0ed8c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0982764-be8d-4e45-a255-32c3de3c2040",
                            Email = "manu@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANU@GMAIL.COM",
                            NormalizedUserName = "MANU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELMZmg4rVjwzoA5qil7n7QrkSUjjcT1ocmTPRuh+GbGrG/9X0esWsLOvqdVX3LQvlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eec97c48-db74-4ef3-82d3-dfc957ab9839",
                            TwoFactorEnabled = false,
                            UserName = "manu@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Cart", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("ClientId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Alfatar"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Antonovo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Apriltsi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Aytos"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Batak"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Belene"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Belitsa"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Belogradchik"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Beloslav"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Berkovitsa"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Blagoevgrad"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Bobov Dol"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Botevgrad"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Bozhurishte"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Bregovo"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Breznik"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Brusartsi"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Burgas"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Byala Slatina"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Chernomorets"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Cherven Bryag"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Chirpan"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Dalgopol"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Devin"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Dimitrovgrad"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Dobrich"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Dolni Chiflik"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Dospat"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Dryanovo"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Dulovo"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Dupnitsa"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Dve Mogili"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Elena"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Elhovo"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Elin Pelin"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Etropole"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Gabrovo"
                        },
                        new
                        {
                            Id = 38,
                            Name = "General Toshevo"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Glavinitsa"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Gorna Oryahovitsa"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Gotse Delchev"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Gramada"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Gulubovo"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Gulyantsi"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Gurkovo"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Harmanli"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Haskovo"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Isperih"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Ivaylovgrad"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Kableshkovo"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Kalofer"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Kardzhali"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Karnobat"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Kavarna"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Kazanlak"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Kirkovo"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Knezha"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Kostenets"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Kozloduy"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Kuklen"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Kurdzhali"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Kyustendil"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Laki"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Letnitsa"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Levski"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Lovech"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Loznitsa"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Madan"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Madzharovo"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Malko Tarnovo"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Merichleri"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Mizia"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Momchilgrad"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Montana"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Nessebar"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Nikolaevo"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Nikopol"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Nova Zagora"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Omurtag"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Opaka"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Panagyurishte"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Parvomay"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Pavel Banya"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Pazardzhik"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Pernik"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Petrich"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Pirdop"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Pleven"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Pomorie"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Popovo"
                        },
                        new
                        {
                            Id = 92,
                            Name = "Radnevo"
                        },
                        new
                        {
                            Id = 93,
                            Name = "Radomir"
                        },
                        new
                        {
                            Id = 94,
                            Name = "Rakitovo"
                        },
                        new
                        {
                            Id = 95,
                            Name = "Razgrad"
                        },
                        new
                        {
                            Id = 96,
                            Name = "Rila"
                        },
                        new
                        {
                            Id = 97,
                            Name = "Roman"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Rudozem"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Ruse"
                        },
                        new
                        {
                            Id = 100,
                            Name = "Samokov"
                        },
                        new
                        {
                            Id = 101,
                            Name = "Sandanski"
                        },
                        new
                        {
                            Id = 102,
                            Name = "Sarnitsa"
                        },
                        new
                        {
                            Id = 103,
                            Name = "Satovcha"
                        },
                        new
                        {
                            Id = 104,
                            Name = "Septemvri"
                        },
                        new
                        {
                            Id = 105,
                            Name = "Sevlievo"
                        },
                        new
                        {
                            Id = 106,
                            Name = "Shumen"
                        },
                        new
                        {
                            Id = 107,
                            Name = "Silistra"
                        },
                        new
                        {
                            Id = 108,
                            Name = "Simeonovgrad"
                        },
                        new
                        {
                            Id = 109,
                            Name = "Slavyanovo"
                        },
                        new
                        {
                            Id = 110,
                            Name = "Sliven"
                        },
                        new
                        {
                            Id = 111,
                            Name = "Smyadovo"
                        },
                        new
                        {
                            Id = 112,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 113,
                            Name = "Sopot"
                        },
                        new
                        {
                            Id = 114,
                            Name = "Stamboliyski"
                        },
                        new
                        {
                            Id = 115,
                            Name = "Stara Zagora"
                        },
                        new
                        {
                            Id = 116,
                            Name = "Straldzha"
                        },
                        new
                        {
                            Id = 117,
                            Name = "Strazhitsa"
                        },
                        new
                        {
                            Id = 118,
                            Name = "Strumyani"
                        },
                        new
                        {
                            Id = 119,
                            Name = "Sungurlare"
                        },
                        new
                        {
                            Id = 120,
                            Name = "Suvorovo"
                        },
                        new
                        {
                            Id = 121,
                            Name = "Sveti Vlas"
                        },
                        new
                        {
                            Id = 122,
                            Name = "Svilengrad"
                        },
                        new
                        {
                            Id = 123,
                            Name = "Svishtov"
                        },
                        new
                        {
                            Id = 124,
                            Name = "Targovishte"
                        },
                        new
                        {
                            Id = 125,
                            Name = "Tervel"
                        },
                        new
                        {
                            Id = 126,
                            Name = "Teteven"
                        },
                        new
                        {
                            Id = 127,
                            Name = "Topolovgrad"
                        },
                        new
                        {
                            Id = 128,
                            Name = "Tran"
                        },
                        new
                        {
                            Id = 129,
                            Name = "Troyan"
                        },
                        new
                        {
                            Id = 130,
                            Name = "Tsarevo"
                        },
                        new
                        {
                            Id = 131,
                            Name = "Tutrakan"
                        },
                        new
                        {
                            Id = 132,
                            Name = "Tvarditsa"
                        },
                        new
                        {
                            Id = 133,
                            Name = "Ugarchin"
                        },
                        new
                        {
                            Id = 134,
                            Name = "Valchedram"
                        },
                        new
                        {
                            Id = 135,
                            Name = "Varbitsa"
                        },
                        new
                        {
                            Id = 136,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 137,
                            Name = "Varshets"
                        },
                        new
                        {
                            Id = 138,
                            Name = "Veliko Tarnovo"
                        },
                        new
                        {
                            Id = 139,
                            Name = "Vetovo"
                        },
                        new
                        {
                            Id = 140,
                            Name = "Vidin"
                        },
                        new
                        {
                            Id = 141,
                            Name = "Vratsa"
                        },
                        new
                        {
                            Id = 142,
                            Name = "Yambol"
                        },
                        new
                        {
                            Id = 143,
                            Name = "Zavet"
                        });
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.FavouriteProduct", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Cart", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallFarm.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.FavouriteProduct", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallFarm.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Manufacturer", b =>
                {
                    b.HasOne("SmallFarm.Data.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Order", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.OrderProduct", b =>
                {
                    b.HasOne("SmallFarm.Data.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallFarm.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Product", b =>
                {
                    b.HasOne("SmallFarm.Data.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
