// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmallFarm.Data;

#nullable disable

namespace SmallFarm.Data.Migrations
{
    [DbContext(typeof(SmallFarmDbContext))]
    partial class SmallFarmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7d8a662d-1c64-4c58-b3c5-af0cbb51bcab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98902ffd-9a55-4c95-b6bd-ee1855c8c59c",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gabriel",
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECOTEkAn18UZpzluvX+JTF0yBYP6MKe71J9pwFwlQkWWNOaXz+5JmaYnlSViwsnBEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ecc3561-7063-41c7-921f-54836c8625be",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "f61b7997-5b5b-4b60-89f2-eba32d1a3d29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "686dff55-29a4-4708-9105-43b01933aacb",
                            Email = "manu@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Dragiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANU@GMAIL.COM",
                            NormalizedUserName = "MANU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMprFU891vxNnRbJAaUE56+ew9wzOSJKwbOD044WLulHpgH0Tk9OdyIjw76wJnAyMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a240550a-7db2-4d08-bfd3-ba236b1660d3",
                            TwoFactorEnabled = false,
                            UserName = "manu@gmail.com"
                        },
                        new
                        {
                            Id = "55e59ae2-4ff1-40a5-944c-c50f8f282a4e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6c14835-b0ce-4f2a-b382-a88e1b132808",
                            Email = "guest@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Todor",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@GMAIL.COM",
                            NormalizedUserName = "GUEST@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK0P5rlIuEvIcYixqS9MHXBmm8dgMgmoYLiep+rhEMnwPBEMiESPkE+uF5pPFyLqjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9cf03625-afd5-4134-8406-044cadb9c2c8",
                            TwoFactorEnabled = false,
                            UserName = "guest@gmail.com"
                        },
                        new
                        {
                            Id = "3610808e-0d91-48a2-9a94-7d5772ff2160",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "607caf0d-6201-4746-a49a-0ebff1f188dc",
                            Email = "example@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE@GMAIL.COM",
                            NormalizedUserName = "EXAMPLE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBevgPkPyF+//mMAkATK0asxWg/Yene4aaW3HvzDSPBRru6vPfQkvY39pq5xK403sw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eeeb91a2-3a6f-49f2-99e1-3eeb34d6e3cc",
                            TwoFactorEnabled = false,
                            UserName = "example@gmail.com"
                        });
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Cart", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("ClientId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Alfatar"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Antonovo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Apriltsi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Aytos"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Batak"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Belene"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Belitsa"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Belogradchik"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Beloslav"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Berkovitsa"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Blagoevgrad"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Bobov Dol"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Botevgrad"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Bozhurishte"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Bregovo"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Breznik"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Brusartsi"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Burgas"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Byala Slatina"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Chernomorets"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Cherven Bryag"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Chirpan"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Dalgopol"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Devin"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Dimitrovgrad"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Dobrich"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Dolni Chiflik"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Dospat"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Dryanovo"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Dulovo"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Dupnitsa"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Dve Mogili"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Elena"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Elhovo"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Elin Pelin"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Etropole"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Gabrovo"
                        },
                        new
                        {
                            Id = 38,
                            Name = "General Toshevo"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Glavinitsa"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Gorna Oryahovitsa"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Gotse Delchev"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Gramada"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Gulubovo"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Gulyantsi"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Gurkovo"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Harmanli"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Haskovo"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Isperih"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Ivaylovgrad"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Kableshkovo"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Kalofer"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Kardzhali"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Karnobat"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Kavarna"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Kazanlak"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Kirkovo"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Knezha"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Kostenets"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Kozloduy"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Kuklen"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Kurdzhali"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Kyustendil"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Laki"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Letnitsa"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Levski"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Lovech"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Loznitsa"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Madan"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Madzharovo"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Malko Tarnovo"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Merichleri"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Mizia"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Momchilgrad"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Montana"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Nessebar"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Nikolaevo"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Nikopol"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Nova Zagora"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Omurtag"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Opaka"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Panagyurishte"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Parvomay"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Pavel Banya"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Pazardzhik"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Pernik"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Petrich"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Pirdop"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Pleven"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Pomorie"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Popovo"
                        },
                        new
                        {
                            Id = 92,
                            Name = "Radnevo"
                        },
                        new
                        {
                            Id = 93,
                            Name = "Radomir"
                        },
                        new
                        {
                            Id = 94,
                            Name = "Rakitovo"
                        },
                        new
                        {
                            Id = 95,
                            Name = "Razgrad"
                        },
                        new
                        {
                            Id = 96,
                            Name = "Rila"
                        },
                        new
                        {
                            Id = 97,
                            Name = "Roman"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Rudozem"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Ruse"
                        },
                        new
                        {
                            Id = 100,
                            Name = "Samokov"
                        },
                        new
                        {
                            Id = 101,
                            Name = "Sandanski"
                        },
                        new
                        {
                            Id = 102,
                            Name = "Sarnitsa"
                        },
                        new
                        {
                            Id = 103,
                            Name = "Satovcha"
                        },
                        new
                        {
                            Id = 104,
                            Name = "Septemvri"
                        },
                        new
                        {
                            Id = 105,
                            Name = "Sevlievo"
                        },
                        new
                        {
                            Id = 106,
                            Name = "Shumen"
                        },
                        new
                        {
                            Id = 107,
                            Name = "Silistra"
                        },
                        new
                        {
                            Id = 108,
                            Name = "Simeonovgrad"
                        },
                        new
                        {
                            Id = 109,
                            Name = "Slavyanovo"
                        },
                        new
                        {
                            Id = 110,
                            Name = "Sliven"
                        },
                        new
                        {
                            Id = 111,
                            Name = "Smyadovo"
                        },
                        new
                        {
                            Id = 112,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 113,
                            Name = "Sopot"
                        },
                        new
                        {
                            Id = 114,
                            Name = "Stamboliyski"
                        },
                        new
                        {
                            Id = 115,
                            Name = "Stara Zagora"
                        },
                        new
                        {
                            Id = 116,
                            Name = "Straldzha"
                        },
                        new
                        {
                            Id = 117,
                            Name = "Strazhitsa"
                        },
                        new
                        {
                            Id = 118,
                            Name = "Strumyani"
                        },
                        new
                        {
                            Id = 119,
                            Name = "Sungurlare"
                        },
                        new
                        {
                            Id = 120,
                            Name = "Suvorovo"
                        },
                        new
                        {
                            Id = 121,
                            Name = "Sveti Vlas"
                        },
                        new
                        {
                            Id = 122,
                            Name = "Svilengrad"
                        },
                        new
                        {
                            Id = 123,
                            Name = "Svishtov"
                        },
                        new
                        {
                            Id = 124,
                            Name = "Targovishte"
                        },
                        new
                        {
                            Id = 125,
                            Name = "Tervel"
                        },
                        new
                        {
                            Id = 126,
                            Name = "Teteven"
                        },
                        new
                        {
                            Id = 127,
                            Name = "Topolovgrad"
                        },
                        new
                        {
                            Id = 128,
                            Name = "Tran"
                        },
                        new
                        {
                            Id = 129,
                            Name = "Troyan"
                        },
                        new
                        {
                            Id = 130,
                            Name = "Tsarevo"
                        },
                        new
                        {
                            Id = 131,
                            Name = "Tutrakan"
                        },
                        new
                        {
                            Id = 132,
                            Name = "Tvarditsa"
                        },
                        new
                        {
                            Id = 133,
                            Name = "Ugarchin"
                        },
                        new
                        {
                            Id = 134,
                            Name = "Valchedram"
                        },
                        new
                        {
                            Id = 135,
                            Name = "Varbitsa"
                        },
                        new
                        {
                            Id = 136,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 137,
                            Name = "Varshets"
                        },
                        new
                        {
                            Id = 138,
                            Name = "Veliko Tarnovo"
                        },
                        new
                        {
                            Id = 139,
                            Name = "Vetovo"
                        },
                        new
                        {
                            Id = 140,
                            Name = "Vidin"
                        },
                        new
                        {
                            Id = 141,
                            Name = "Vratsa"
                        },
                        new
                        {
                            Id = 142,
                            Name = "Yambol"
                        },
                        new
                        {
                            Id = 143,
                            Name = "Zavet"
                        });
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f61b7997-5b5b-4b60-89f2-eba32d1a3d29"),
                            Address = "bul. Todor Kableshkov",
                            CityId = 1,
                            Description = "We are one of the best on the market!",
                            Email = "manu@gmail.com",
                            Name = "BestProducts OOD",
                            PhoneNumber = "+359885118198"
                        });
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PricePerKg")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04a2c38a-e0e3-4113-8ae6-348aafe3abe5"),
                            CategoryId = 2,
                            Description = "Very delicious western bulgarian apples!",
                            ImageUrl = "https://images.unsplash.com/photo-1576179635662-9d1983e97e1e?q=80&w=1887&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsActive = true,
                            ManufacturerId = new Guid("f61b7997-5b5b-4b60-89f2-eba32d1a3d29"),
                            Name = "Red Apples",
                            PricePerKg = 3.90m,
                            Quantity = 10.0
                        },
                        new
                        {
                            Id = new Guid("f72628e2-1c71-44a5-ad94-6b864bfef2c3"),
                            CategoryId = 2,
                            Description = "Very delicious western bulgarian bananas!",
                            ImageUrl = "https://images.unsplash.com/photo-1603833665858-e61d17a86224?q=80&w=1854&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsActive = true,
                            ManufacturerId = new Guid("f61b7997-5b5b-4b60-89f2-eba32d1a3d29"),
                            Name = "Bananas",
                            PricePerKg = 3.10m,
                            Quantity = 20.0
                        },
                        new
                        {
                            Id = new Guid("94cb6162-7008-461b-b4e6-592d0aed549f"),
                            CategoryId = 3,
                            Description = "Milk form domestic cow!",
                            ImageUrl = "https://images.unsplash.com/photo-1601436423474-51738541c1b1?q=80&w=1854&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsActive = true,
                            ManufacturerId = new Guid("f61b7997-5b5b-4b60-89f2-eba32d1a3d29"),
                            Name = "Cow milk",
                            PricePerKg = 1.60m,
                            Quantity = 25.0
                        },
                        new
                        {
                            Id = new Guid("b32c25ae-d227-4e60-8e2c-2517f7494ab6"),
                            CategoryId = 1,
                            Description = "Very delicious western bulgarian tomatoes!",
                            ImageUrl = "https://images.unsplash.com/photo-1582284540020-8acbe03f4924?q=80&w=1935&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsActive = true,
                            ManufacturerId = new Guid("f61b7997-5b5b-4b60-89f2-eba32d1a3d29"),
                            Name = "Big red tomatoes",
                            PricePerKg = 3.30m,
                            Quantity = 9.0
                        },
                        new
                        {
                            Id = new Guid("59c235f3-fb26-42f3-b35b-d63090738654"),
                            CategoryId = 1,
                            Description = "Very delicious western bulgarian cucumbers!",
                            ImageUrl = "https://images.unsplash.com/photo-1449300079323-02e209d9d3a6?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsActive = true,
                            ManufacturerId = new Guid("f61b7997-5b5b-4b60-89f2-eba32d1a3d29"),
                            Name = "Cucumbers",
                            PricePerKg = 1.90m,
                            Quantity = 7.0
                        },
                        new
                        {
                            Id = new Guid("14218294-efdc-4900-a6cf-8cc12b33de9b"),
                            CategoryId = 1,
                            Description = "Very delicious western bulgarian potatoes!",
                            ImageUrl = "https://images.unsplash.com/photo-1590165482129-1b8b27698780?q=80&w=1854&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsActive = true,
                            ManufacturerId = new Guid("f61b7997-5b5b-4b60-89f2-eba32d1a3d29"),
                            Name = "Small Potatoes",
                            PricePerKg = 5.20m,
                            Quantity = 12.0
                        });
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vegetable"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Drink"
                        });
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ManufacturerAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ManufacturerDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("ManufacturerPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmallFarm.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmallFarm.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallFarm.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmallFarm.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Cart", b =>
                {
                    b.HasOne("SmallFarm.Data.Entities.ApplicationUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallFarm.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Manufacturer", b =>
                {
                    b.HasOne("SmallFarm.Data.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Order", b =>
                {
                    b.HasOne("SmallFarm.Data.Entities.ApplicationUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Product", b =>
                {
                    b.HasOne("SmallFarm.Data.Entities.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallFarm.Data.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallFarm.Data.Entities.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId");

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Request", b =>
                {
                    b.HasOne("SmallFarm.Data.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallFarm.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SmallFarm.Data.Entities.Order", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
